{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAGjCH,EAAKC,KAAKM,iBAAiB,UAQ3B,SAAsBC,GAMpB,IALAA,EAAMC,iBACNC,EAASC,OAAOX,EAAKM,OAAOM,OAC5BC,EAAOF,OAAOX,EAAKK,KAAKO,OACxBE,EAAQH,OAAOX,EAAKI,MAAMQ,OAErBG,EAAI,EAAGA,EAAIL,EAAQK,GAAK,EAG3BC,EAFAC,GAAW,EAEYH,GACpBI,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALf,MACjBkB,EAAAxB,GAASyB,OAAOC,QACd,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUO,EAAKR,EAALf,MAClBkB,EAAAxB,GAASyB,OAAOC,QACd,sBAAqCC,OAAfL,EAAS,QAAYK,OAANE,EAAM,M,IAIjDb,GAASD,EAKX,SAASG,EAAcI,EAAUQ,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCjB,EAAUkB,YAAW,WACfH,EACFF,EAAQ,CAAEV,WAAUhB,MAAAwB,IAEpBG,EAAO,CAAEX,WAAUhB,MAAAwB,G,GAEpBA,E,IAZPX,EAAU,EACVF,EAAI,C,IA9BN,IAAIL,EAAS,EACTG,EAAO,EACPC,EAAQ,EACRC,EAAI,EACJE,EAAU,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nlet amount = 0;\nlet step = 0;\nlet delay = 0;\nlet i = 0;\nlet timerId = 0;\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  amount = Number(refs.amount.value);\n  step = Number(refs.step.value);\n  delay = Number(refs.delay.value);\n\n  for (i = 0; i < amount; i += 1) {\n    timerId += 1;\n\n    createPromise(timerId, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n  timerId = 0;\n  i = 0;\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      timerId = setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","addEventListener","event","preventDefault","$ce04d3a99e08e73b$var$amount","Number","value","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$i","createPromise","$ce04d3a99e08e73b$var$timerId","then","param","position","delay1","$parcel$interopDefault","Notify","success","concat","catch","delay2","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.d2bbb01a.js.map"}